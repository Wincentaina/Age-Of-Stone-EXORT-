export class Agent {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.emoji = "‚ùì";
        this.energy = 10; // –±–∞–∑–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    }

    step(gridSize, nearbyAgents = []) {
        const dir = Math.floor(Math.random() * 4);
        if (dir === 0 && this.x > 0) this.x--;
        if (dir === 1 && this.x < gridSize - 1) this.x++;
        if (dir === 2 && this.y > 0) this.y--;
        if (dir === 3 && this.y < gridSize - 1) this.y++;
    }
}

export class Human extends Agent {
    constructor(x, y) {
        super(x, y);
        this.emoji = "üßç";
        this.target = null;
    }

    step(gridSize, nearbyAgents = []) {
        // –≠–Ω–µ—Ä–≥–∏—è —Ç—Ä–∞—Ç–∏—Ç—Å—è –∫–∞–∂–¥—ã–π —à–∞–≥
        this.energy = Math.max(0, this.energy - 1);

        // –ò—â–µ–º –ª—é–¥–µ–π —Ä—è–¥–æ–º –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        const humansNearby = nearbyAgents.filter((a) => a instanceof Human);

        // –û–ª–µ–Ω–∏ —Ä—è–¥–æ–º (–µ–¥–∞)
        const deerNearby = nearbyAgents.filter((a) => a instanceof Deer);

        // –í–æ–ª–∫–∏ —Ä—è–¥–æ–º (—É–≥—Ä–æ–∑–∞)
        const wolvesNearby = nearbyAgents.filter((a) => a instanceof Wolf);

        // –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –∏–∑–±–µ–≥–∞–µ–º –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞ ‚Äî –∏–¥—ë–º –∫ –ª—é–¥—è–º, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 2 —Ä—è–¥–æ–º
        if (humansNearby.length < 2) {
            // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (–∏–∑ –≤—Å–µ–π –ø–æ–ø—É–ª—è—Ü–∏–∏, –Ω–µ —Ç–æ–ª—å–∫–æ nearby)
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã - –¥–≤–∏–≥–∞–µ–º—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º —Ü–µ–ª—å
            const groupTarget = humansNearby[0] || null;

            if (groupTarget) {
                this.moveTowards(groupTarget.x, groupTarget.y, gridSize);
                return;
            }
            // –µ—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç - —Å–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            super.step(gridSize);
            return;
        }

        // –ï—Å–ª–∏ —Ä—è–¥–æ–º >= 2 —á–µ–ª–æ–≤–µ–∫–∞, –æ—Ö–æ—Ç–∏–º—Å—è –Ω–∞ –æ–ª–µ–Ω–µ–π
        if (humansNearby.length >= 2 && deerNearby.length > 0) {
            this.moveTowards(deerNearby[0].x, deerNearby[0].y, gridSize);
            return;
        }

        // –ï—Å–ª–∏ —Ä—è–¥–æ–º –≤–æ–ª–∫–∏, –±–µ–∂–∏–º –æ—Ç –Ω–∏—Ö (–≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ)
        if (wolvesNearby.length > 0) {
            // –ë–µ–∂–∏–º –æ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–æ–ª–∫–∞
            const threat = wolvesNearby[0];
            this.moveAwayFrom(threat.x, threat.y, gridSize);
            return;
        }

        // –ò–Ω–∞—á–µ —Å–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è —à–∞–Ω—Å —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ)
        if (Math.random() < 0.15) {
            super.step(gridSize);
        }
    }

    moveTowards(targetX, targetY, gridSize) {
        const dx = targetX - this.x;
        const dy = targetY - this.y;
        this.x += Math.sign(dx);
        this.y += Math.sign(dy);
        this.x = Math.max(0, Math.min(gridSize - 1, this.x));
        this.y = Math.max(0, Math.min(gridSize - 1, this.y));
    }

    moveAwayFrom(targetX, targetY, gridSize) {
        const dx = this.x - targetX;
        const dy = this.y - targetY;
        this.x += Math.sign(dx);
        this.y += Math.sign(dy);
        this.x = Math.max(0, Math.min(gridSize - 1, this.x));
        this.y = Math.max(0, Math.min(gridSize - 1, this.y));
    }
}

export class Animal extends Agent {
    constructor(x, y, dangerLevel = 1) {
        super(x, y);
        this.dangerLevel = dangerLevel;
    }
}

export class Wolf extends Animal {
    constructor(x, y) {
        super(x, y, 3);
        this.emoji = "üê∫";
    }

    step(gridSize, nearbyAgents = []) {
        const prey = nearbyAgents.filter(a => a instanceof Human || a instanceof Deer);
        const wolvesNearby = nearbyAgents.filter(a => a instanceof Wolf);

        // –í–æ–ª–∫ –±–æ–∏—Ç—Å—è –Ω–∞–ø–∞–¥–∞—Ç—å, –µ—Å–ª–∏ —Ä—è–¥–æ–º >= 2 —á–µ–ª–æ–≤–µ–∫–∞ (—Ç–æ–ª–ø–∞)
        const humansNearby = nearbyAgents.filter(a => a instanceof Human);
        if (humansNearby.length >= 2) {
            // –°—Ç–∞–¥–æ –ª—é–¥–µ–π ‚Äî –Ω–µ –∞—Ç–∞–∫—É–µ–º
            super.step(gridSize);
            return;
        }

        // –í–æ–ª–∫ –∞—Ç–∞–∫—É–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä—è–¥–æ–º >= 2 –≤–æ–ª–∫–∞ (—Å—Ç–∞—è)
        if (wolvesNearby.length >= 2 && prey.length > 0) {
            // –ù–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–π –∂–µ—Ä—Ç–≤–µ
            this.moveTowards(prey[0].x, prey[0].y, gridSize);
            return;
        }

        // –ò–Ω–∞—á–µ –≤–æ–ª–∫ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω–æ –¥–≤–∏–≥–∞–µ—Ç—Å—è
        super.step(gridSize);
    }

    moveTowards(targetX, targetY, gridSize) {
        const dx = targetX - this.x;
        const dy = targetY - this.y;
        this.x += Math.sign(dx);
        this.y += Math.sign(dy);
        this.x = Math.max(0, Math.min(gridSize - 1, this.x));
        this.y = Math.max(0, Math.min(gridSize - 1, this.y));
    }
}

export class Deer extends Animal {
    constructor(x, y) {
        super(x, y, 1);
        this.emoji = "ü¶å";
    }

    step(gridSize, nearbyAgents = []) {
        const threat = nearbyAgents.find(a => a instanceof Wolf);
        const plantsNearby = nearbyAgents.filter(a => a instanceof Plant);

        if (threat) {
            this.x += this.x >= threat.x ? 1 : -1;
            this.y += this.y >= threat.y ? 1 : -1;
        } else if (plantsNearby.length > 0) {
            this.x += this.x <= plantsNearby[0].x ? 1 : -1;
            this.y += this.y <= plantsNearby[0].y ? 1 : -1;
        } else {
            super.step(gridSize);
        }

        this.x = Math.max(0, Math.min(gridSize - 1, this.x));
        this.y = Math.max(0, Math.min(gridSize - 1, this.y));
    }
}

export class Plant extends Agent {
    constructor(x, y) {
        super(x, y);
        this.emoji = "üåø";
    }

    step(gridSize, nearbyAgents = []) {
        // –†–∞—Å—Ç–µ–Ω–∏—è –Ω–µ –¥–≤–∏–≥–∞—é—Ç—Å—è
    }
}

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ –≤ —à–∞–≥–µ
function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

export class Simulation {
    constructor(gridSize) {
        this.gridSize = gridSize;
        this.agents = [];
        for (let i = 0; i < 5; i++) {
            this.agents.push(new Human(this.rand(), this.rand()));
            this.agents.push(new Deer(this.rand(), this.rand()));
            this.agents.push(new Wolf(this.rand(), this.rand()));
            this.agents.push(new Plant(this.rand(), this.rand()));
        }
    }

    rand() {
        return Math.floor(Math.random() * this.gridSize);
    }

    getNearbyAgents(x, y, radius) {
        return this.agents.filter((a) => {
            const dx = Math.abs(a.x - x);
            const dy = Math.abs(a.y - y);
            return dx <= radius && dy <= radius && !(dx === 0 && dy === 0);
        });
    }

    getGrid() {
        const grid = Array(this.gridSize * this.gridSize)
            .fill(null)
            .map(() => []);
        for (const agent of this.agents) {
            const index = agent.y * this.gridSize + agent.x;
            grid[index].push(agent);
        }
        return grid;
    }

    resolveConflicts() {
        const toRemove = new Set();
        const grid = this.getGrid();

        for (let i = 0; i < grid.length; i++) {
            const agents = grid[i];
            if (agents.length < 2) continue;

            const wolves = agents.filter((a) => a instanceof Wolf);
            const humans = agents.filter((a) => a instanceof Human);
            const deers = agents.filter((a) => a instanceof Deer);

            // –í–æ–ª–∫–∏ –Ω–∞–ø–∞–¥–∞—é—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –æ–¥–∏–Ω
            if (wolves.length > 0 && humans.length === 1) {
                for (const human of humans) toRemove.add(human);
            }

            // –í–æ–ª–∫–∏ –Ω–∞–ø–∞–¥–∞—é—Ç –Ω–∞ –æ–ª–µ–Ω—è –≤—Å–µ–≥–¥–∞
            if (wolves.length > 0 && deers.length > 0) {
                for (const deer of deers) toRemove.add(deer);
            }

            // –õ—é–¥–∏ –æ—Ö–æ—Ç—è—Ç—Å—è –Ω–∞ –æ–ª–µ–Ω–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 1
            if (humans.length > 1 && deers.length > 0) {
                for (const deer of deers) toRemove.add(deer);
            }
        }

        this.agents = this.agents.filter((a) => !toRemove.has(a));
    }

    step() {
        const agentsToStep = shuffle([...this.agents]);
        for (const agent of agentsToStep) {
            const nearby = this.getNearbyAgents(agent.x, agent.y, 1);
            agent.step(this.gridSize, nearby);
        }
        this.resolveConflicts();
    }

    addAgent(type) {
        const x = this.rand();
        const y = this.rand();
        if (type === "human") this.agents.push(new Human(x, y));
        if (type === "animal") this.agents.push(new Animal(x, y));
        if (type === "deer") this.agents.push(new Deer(x, y));
        if (type === "wolf") this.agents.push(new Wolf(x, y));
        if (type === "plant") this.agents.push(new Plant(x, y));
    }

    clear() {
        this.agents = [];
    }
}